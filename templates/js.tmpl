// vim: set filetype=javascript:

// ----------------------------------------------------------------------------------------------------------------- //
// module
// ----------------------------------------------------------------------------------------------------------------- //

// На первое время, шаблоны (и соответственно matcher) выводятся только на верхнем уровне.

module
    var yr = yr || require('yate/lib/runtime.js');

    (function() {

        var cmpNN = yr.cmpNN;
        var cmpSN = yr.cmpSN;
        var nodeset2xml = yr.nodeset2xml;
        var nodeset2boolean = yr.nodeset2boolean;
        var nodeset2attrvalue = yr.nodeset2attrvalue;
        var nodeset2scalar = yr.nodeset2scalar;
        var scalar2attrvalue = yr.scalar2attrvalue;
        var xml2attrvalue = yr.xml2attrvalue;
        var scalar2xml = yr.scalar2xml;
        var xml2scalar = yr.xml2scalar;
        var simpleScalar = yr.simpleScalar;
        var simpleBoolean = yr.simpleBoolean;
        var selectNametest = yr.selectNametest;
        var closeAttrs = yr.closeAttrs;

        var M = new yr.Module();

        %{ Block.js__defs() }

        %{ Block.Templates :defs }

        M.matcher = %{ Block.js__matcher() };
        M.imports = %{ Block.Imports };

        yr.register('%{ . :name }', M);

    })();

module :name [ ast.Name ]

    %{ Name }

//  Дефольтное название модуля.
module :name

    main

import

    '%{ Name }'

// ----------------------------------------------------------------------------------------------------------------- //
// defs: template, function_, key, var_
// ----------------------------------------------------------------------------------------------------------------- //

// template.

template :defs

    // match %{ Selectors :yate } %{ Mode }
    M.t%{ Id } = %{ . :def };
    %{ . :selectors }

template :def
    function t%{ Id }(m, c%{ Cid }, i%{ Cid }, l%{ Cid }, a%{ Rid }%{ Args }) {
        %{ Args :defaults }
        %{ . :template_prologue }

        %{ Body :output }

        return r%{ Rid };
    }

template_mode [ ast.Value ]

    : %{ Value }

template :selectors [ ast.Selectors.length() === 1 ]

    M.t%{ Id }.j = %{ Selectors :template_selector };
    M.t%{ Id }.a = %{ Selectors :template_abs };

template :selectors

    M.t%{ Id }.s = [ %{ Selectors :template_selector } ];
    M.t%{ Id }.a = [ %{ Selectors :template_abs } ];

template :template_prologue [ ast.get_type() === 'array' ]

    var r%{ Rid } = [];

template :template_prologue [ ast.get_type() === 'object' ]

    var r%{ Rid } = {};

template :template_prologue

    var r%{ Rid } = '';


// Для jpath выводим имя его переменной, для / -- 1.

jpath :template_selector [ ast.is_root() ]

    1

jpath :template_selector

    j%{ Id }

jpath :template_abs [ ast.Abs ]

    1

jpath :template_abs

    0


// ----------------------------------------------------------------------------------------------------------------- //

function_ :comment

    func %{ Name }(%{ Args :yate }) : %{ get_type() }

function_ :defs [ ast.isImported ]

    // imported %{ . :comment }

// function_

function_ :defs [ ast.isGlobal() ]

    // %{ . :comment }
    M.f%{ Id } = %{ . :def };

function_ :defs

    %{ . :def }


//  Только функции с типом attr или xml используют параметр aN.
function_ :def [ ast.get_type() === 'attr' || ast.get_type() === 'xml' ]

    function f%{ Id }(m, c%{ Cid }, i%{ Cid }, l%{ Cid }, a%{ Rid }%{ Args }) {
        %{ . :function_body }
    }

function_ :def

    function f%{ Id }(m, c%{ Cid }, i%{ Cid }, l%{ Cid }%{ Args }) {
        %{ . :function_body }
    }

//  Тело функции состоит из одного инлайнового выражения (без каких-либо определений).
* :function_body [ ast.Body.inline() ]
    %{ Args :defaults }

    return %{ Body };

* :function_body

    %{ Args :defaults }
    %{ . :function_prologue }

    %{ Body :output }

    %{ . :function_epilogue }


* :function_prologue [ ast.get_type() === 'object' ]

    var r%{ Rid } = {};

* :function_prologue [ ast.get_type() === 'array' ]

    var r%{ Rid } = [];

* :function_prologue [ ast.get_type() === 'nodeset' ]

    var r%{ Rid } = [];

* :function_prologue [ ast.get_type() === 'boolean' ]

    var r%{ Rid } = false;

//  Функция типа attr не использует переменную rN.
* :function_prologue [ ast.get_type() !== 'attr' ]

    var r%{ Rid } = '';


* :function_epilogue [ ast.get_type() === 'attr' ]

    return a%{ Rid }.a;

* :function_epilogue

    return r%{ Rid };


//  ---------------------------------------------------------------------------------------------------------------  //
//  var_
//  ---------------------------------------------------------------------------------------------------------------  //

var_ :body

    %{ Value :prologue }
    %{ Value :output }
    %{ . :epilogue }

var_ :comment

    var %{ Name } : %{ Value.get_type() }


//  Глобальная переменная.
//  ---------------------------------------------------------------------------------------------------------------  //

var_ :defs [ ast.isImported ]

    //  imported %{ . :comment }

var_ :defs [ ast.isGlobal() ]

    //  %{ . :comment }
    M.v%{ Id } = %{ . :global };

var_ :global [ ast.Value.isConst() ]

    %{ Value }

var_ :global [ ast.Value.inline() ]

    function(m, c0, i0, l0) {
        return %{ Value };
    }

var_ :global

    function(m, c0, i0, l0) {
        %{ . :body }
    }

var_ :epilogue [ ast.isGlobal() && ast.Value.get_type() === 'attr' ]

    return a%{ Value.Rid }.a;

var_ :epilogue [ ast.isGlobal() ]

    return r%{ Value.Rid };


//  Локальная переменная
//  ---------------------------------------------------------------------------------------------------------------  //

var_ :defs [ ast.Value.inline() ]

    //  %{ . :comment }
    var v%{ Id } = %{ Value };

var_ :defs

    //  %{ . :comment }
    %{ . :body }

var_ :epilogue [ ast.Value.get_type() === 'attr' ]

    var v%{ Id } = a%{ Value.Rid }.a;

var_ :epilogue

    var v%{ Id } = r%{ Value.Rid };


// ----------------------------------------------------------------------------------------------------------------- //

key :defs [ ast.isImported ]

    //  imported key %{ Name }()

key :defs

    M.k%{ Id } = {};
    M.k%{ Id }.n = %{ . :nodes };
    //  %{ Use.get_type() }
    M.k%{ Id }.u = %{ . :use };
    //  %{ Body.get_type() }
    M.k%{ Id }.b = %{ . :body };
    %{ . :types }

key :nodes

    function k%{ Id }n(m, c0, i0, l0) {
        return %{ Nodes };
    }

key :use

    function k%{ Id }u(m, c0, i0, l0) {
        return %{ Use };
    }

key :body

    function k%{ Id }b(m, c0, i0, l0, a0) {
        %{ . :function_body }
    }

key :types

    M.k%{ Id }.ut = '%{ Use.get_type() }';
    M.k%{ Id }.bt = '%{ Body.get_type() }';

// ----------------------------------------------------------------------------------------------------------------- //

//  jpath

jpath :defs
    var j%{ Id } = %{ . :def };

jpath :def

    [ %{ Steps } ]

jpath_nametest

    0, '%{ Name }'

jpath_dots

    1, %{ Length }

jpath_predicate [ ast.isLocal() ]

    2, p%{ Id }

jpath_predicate [ ast.Expr.get_type() === 'boolean' ]

    4, p%{ Id }

jpath_predicate

    3, %{ Expr }

// ----------------------------------------------------------------------------------------------------------------- //

//  jpath_predicate

jpath_predicate :defs
//  FIXME
//  [ this.isLocal() || this.Expr.get_type() === 'nodeset' ]

    function p%{ Id }(m, c%{ Cid }, i%{ Cid }, l%{ Cid }) {
        return %{ Expr };
    }


// ----------------------------------------------------------------------------------------------------------------- //
// block and body
// ----------------------------------------------------------------------------------------------------------------- //

body [ ast.AsList ]

    %{ Block :listitem }

body

    %{ Block }

body :output

    %{ Block :output }


// ----------------------------------------------------------------------------------------------------------------- //

block :output [ ast.AsList ]

    %{ . :listitem }

block

    %{ js__defs() }

    %{ Exprs }

block :output

    %{ js__defs() }

    %{ Exprs :output }

block :listitem

    %{ js__defs() }

    %{ Exprs :listitem }

* :prologue [ ast.get_type() === 'array' ]

    var r%{ Rid } = [];
    var a%{ Rid } = { a: {} };

* :prologue [ ast.get_type() === 'object' ]

    var r%{ Rid } = {};
    var a%{ Rid } = { a: {} };

* :prologue [ ast.get_type() === 'nodeset' ]

    var r%{ Rid } = [];

* :prologue [ ast.get_type() === 'boolean' ]

    var r%{ Rid } = false;

* :prologue

    var r%{ Rid } = '';
    var a%{ Rid } = { a: {} };


// ----------------------------------------------------------------------------------------------------------------- //
// block expressions
// ----------------------------------------------------------------------------------------------------------------- //

if_ :listitem

    %{ . :output }

if_ :output

    if (%{ Condition }) %{ Then :if_body } %{ Elses }

* :if_body

    {
        %{ . :output }
    }

else_if

    else if (%{ Condition }) %{ Body :if_body }

else_

    else %{ Body :if_body }

// ----------------------------------------------------------------------------------------------------------------- //

for_ :listitem

    %{ . :output }

for_ :output

    var items%{ Cid } = %{ Selector };
    for (var i%{ Body.Cid } = 0, l%{ Body.Cid } = items%{ Cid }.length; i%{ Body.Cid } < l%{ Body.Cid }; i%{ Body.Cid }++) {
        var c%{ Body.Cid } = items%{ Cid }[ i%{ Body.Cid } ];
        %{ Body :output }
    }

// ----------------------------------------------------------------------------------------------------------------- //

apply :output

    %{ . :output-prologue }
    r%{ Rid } += %{ . :output-value }

apply :listitem

    %{ . :output-prologue }
    r%{ Rid }.push(%{ . :output-value });

apply :output-prologue [ ast.Expr.id === 'object' ]

    var r%{ Expr.Rid } = {};
    %{ Expr :output }

apply :output-value [ ast.Expr.id === 'object' ]
    m.a(m, yr.object2nodeset(r%{ Expr.Rid }), %{ Mode :string }, a%{ Rid }%{ Args :comma })

apply :output-prologue [ ast.Expr.id === 'array' ]

    var r%{ Expr.Rid } = [];
    %{ Expr :output }

apply :output-value [ ast.Expr.id === 'array' ]
    m.a(m, yr.array2nodeset(r%{ Expr.Rid }), %{ Mode :string }, a%{ Rid }%{ Args :comma })

apply :output-value [ ast.Expr.get_type() === 'object' ]

    m.a(m, yr.object2nodeset(%{ Expr }), %{ Mode :string }, a%{ Rid }%{ Args :comma })

apply :output-value [ ast.Expr.get_type() === 'array' ]

    m.a(m, yr.array2nodeset(%{ Expr }), %{ Mode :string }, a%{ Rid }%{ Args :comma })

apply :output-value

    m.a(m, %{ Expr }, %{ Mode :string }, a%{ Rid }%{ Args :comma })

template_mode :string

    '%{ Value }'

//  ---------------------------------------------------------------------------------------------------------------  //

cdata :listitem

    r%{ Rid }.push(%{ Value });

cdata :output

    r%{ Rid } += %{ Value };

// ----------------------------------------------------------------------------------------------------------------- //

xml_attr :open

    '%{ Name }': new yr.scalarAttr(%{ Value })

xml_line :output

    r%{ Rid } += %{ . :content };

xml_line :listitem

    r%{ Rid }.push(%{ . :content });

xml_line :content

    %{ js__content() }


// ----------------------------------------------------------------------------------------------------------------- //

// FIXME: Закэшировать a0.a в отдельную переменную.
attr :output [ ast.Value.inline() && ast.Op === '+=' ]

    var tmp%{ Cid } = a%{ Rid }.a[ %{ Name } ];
    if (tmp%{ Cid }) {
        a%{ Rid }.a[ %{ Name } ] = tmp%{ Cid }.add%{ AttrType }(%{ Value });
    } else {
        a%{ Rid }.a[ %{ Name } ] = new yr.%{ AttrType }Attr(%{ Value });
    }

attr :output [ ast.Value.inline() ]
    a%{ Rid }.a[ %{ Name } ] = new yr.%{ AttrType }Attr(%{ Value });

attr :output [ ast.Op === '+=' ]

    %{ Value :prologue }
    %{ Value :output }
    var tmp%{ Cid } = a%{ Rid }.a[ %{ Name } ];
    if (tmp%{ Cid }) {
        a%{ Rid }.a[ %{ Name } ] = tmp%{ Cid }.add%{ AttrType }(r%{ Value.Rid });
    } else {
        a%{ Rid }.a[ %{ Name } ] = new yr.%{ AttrType }Attr(r%{ Value.Rid });
    }

attr :output

    %{ Value :prologue }
    %{ Value :output }
    a%{ Rid }.a[ %{ Name } ] = new yr.%{ AttrType }Attr(r%{ Value.Rid });

attrs_close :output
    r%{ Rid } += closeAttrs(a%{ Rid });

attrs_open :output

    a%{ Rid }.a = {
        %{ Attrs :open }
    };
    a%{ Rid }.s = '%{ Name }';



// ----------------------------------------------------------------------------------------------------------------- //

subexpr :listitem

    %{ Block :prologue }
    %{ Block :output }
    r%{ Rid }.push(r%{ Block.Rid });

subexpr :output

    %{ Block :output }



// ----------------------------------------------------------------------------------------------------------------- //
// Selectors: jpath
// ----------------------------------------------------------------------------------------------------------------- //

jpath [ ast.is_root() ]

    [ c%{ Cid }.doc.root ]

jpath [ ast.is_self() ]

    [ c%{ Cid } ]

jpath [ ast.IsSimple && ast.AsType === 'scalar' ]

    simpleScalar('%{ Name }', %{ . :context })

jpath [ ast.IsSimple && ast.AsType === 'boolean' ]

    simpleBoolean('%{ Name }', %{ . :context })

jpath [ ast.IsSimple ]

    selectNametest('%{ Name }', %{ . :context }, [])

jpath

    m.s(j%{ Id }, %{ . :context })

jpath :context [ ast.Abs ]

    c%{ Cid }.doc.root

jpath :context

    c%{ Cid }

// FIXME: Переименовать jpath_filter в inline_filter.
jpath_filter

    m.n(j%{ JPath.Id }, %{ Expr })


// ----------------------------------------------------------------------------------------------------------------- //

arglist_item
    , v%{ Id }

arglist_item :defaults [ ast.Default ]
    v%{ Id } = (v%{ Id } === undefined) ? %{ Default } : v%{ Id };

arglist_item :defaults [ ast.Typedef === 'nodeset' ]
    v%{ Id } = (v%{ Id } === undefined) ? [] : v%{ Id };


// ----------------------------------------------------------------------------------------------------------------- //
//  value
// ----------------------------------------------------------------------------------------------------------------- //

value

    %{ Value }

value :listitem

    r%{ Rid }.push(%{ Value });

value :output [ ( ast.get_type() === 'nodeset' || ast.get_type() === 'boolean' ) && !ast.AsType ]

    r%{ Rid } = %{ Value };

value :output [ ast.get_type() === 'attr' && ast.Value.is('inline_var') ]

    yr.copyAttrs( a%{ Rid }.a, %{ Value } );

value :output [ ast.get_type() === 'attr' && ast.Value.is('inline_function') && ast.Value.def.is('external') ]

    yr.copyAttrs( a%{ Rid }.a, %{ Value } );

//  А тут всегда Value должно быть inline_function.
value :output [ ast.get_type() === 'attr' ]

    %{ Value };

value :output

    r%{ Rid } += %{ Value };


//  ---------------------------------------------------------------------------------------------------------------  //
//  object
//  ---------------------------------------------------------------------------------------------------------------  //

array :listitem

    %{ . :prologue }
    %{ . :output }
    r%{ ~.Rid }.push(r%{ Block.Rid });

array :output

    %{ Block :listitem }

object :listitem

    %{ . :prologue }
    %{ . :output }
    r%{ ~.Rid }.push(r%{ Block.Rid });

object :output

    %{ Block :output }

pair :output [ ast.Value.inline() ]

    r%{ Rid }[ %{ Key } ] = %{ Value };

pair :output

    %{ Value :prologue }
    %{ Value :output }
    r%{ Rid }[ %{ Key } ] = r%{ Value.Rid };

// ----------------------------------------------------------------------------------------------------------------- //
// inline expressions
// ----------------------------------------------------------------------------------------------------------------- //

inline_or
    %{ Left } || %{ Right }

inline_and
    %{ Left } && %{ Right }

inline_not
    !%{ Left }

inline_eq [ ast.Op === '!=' && ( ast.Left.get_type() === 'nodeset' || ast.Right.get_type() === 'nodeset' ) ]

    !(%{ . :cmp })

inline_eq

    %{ . :cmp }

inline_eq :cmp [ ast.Left.get_type() === 'nodeset' && ast.Right.get_type() === 'nodeset' ]

    cmpNN(%{ Left }, %{ Right })

inline_eq :cmp [ ast.Left.get_type() === 'nodeset' ]

    cmpSN(%{ Right }, %{ Left })

inline_eq :cmp [ ast.Right.get_type() === 'nodeset' ]

    cmpSN(%{ Left }, %{ Right })

inline_eq :cmp
    %{ Left } %{ Op } %{ Right }

inline_rel
    %{ Left } %{ Op } %{ Right }

inline_add
    %{ Left } %{ Op } %{ Right }

inline_mul
    %{ Left } %{ Op } %{ Right }

inline_unary
    -%{ Left }

inline_union
    (%{ Left }).concat(%{ Right })

inline_subexpr
    (%{ Expr })



// ----------------------------------------------------------------------------------------------------------------- //

inline_function [ ast.IsExternal ]
    (yr.externals['%{ Name }'])(%{ Args })

//  FIXME: Положить в какой-нибудь флаг инфу о том, что аргументом ключа является нодесет.
inline_function [ ast.IsKey && ast.Args.first().get_type() === 'nodeset' ]
    m.k('k%{ Id }', %{ Args }, c%{ Cid }.doc.root, true)

inline_function [ ast.IsKey ]
    m.k('k%{ Id }', %{ Args }, c%{ Cid }.doc.root)

inline_function [ ast.IsUser && ast.def.isGlobal() ]
    m.f('f%{ Id }', c%{ Cid }, i%{ Cid }, l%{ Cid }%{ . :attrs }%{ Args :comma })

inline_function [ ast.IsUser ]
    f%{ Id }(m, c%{ Cid }, i%{ Cid }, l%{ Cid }%{ . :attrs }%{ Args :comma })

//  Этот вызов функции сохраняется в переменную, а не просто используется.
//  Поэтому мы передаем вместо aN новый пустой объект для атрибутов.
inline_function :attrs [ ast.get_type() === 'attr' && ast.InlineVarValue ]

    , { a: {} }

inline_function :attrs [ ast.get_type() === 'attr' || ast.get_type() === 'xml' ]

    , a%{ Rid }

//  Все остальное -- это встроенные функции, для них есть индивидуальные шаблоны ниже.
//  js__internal() вызывает соответствующий шаблон.
inline_function
    %{ js__internal() }

callargs :comma [ !ast.empty() ]
    , %{ . }

callarg [ ast.Expr.id === 'object' || ast.Expr.id === 'array' ]
    (function() {
        %{ Expr :prologue }
        %{ Expr :output }

        return r%{ Expr.Rid };
    })()

callarg

    %{ Expr }

// ----------------------------------------------------------------------------------------------------------------- //

internal_function_true
    true

internal_function_false
    false

internal_function_name [ ast.Signature === 'nodeset' ]
    yr.nodeName( %{Args} )

internal_function_name
    c%{ Cid }.name

internal_function_index
    i%{ Cid }

internal_function_count [ ast.Signature === 'nodeset' ]
    ( %{Args} ).length

internal_function_count
    l%{ Cid }

internal_function_slice
    yr.slice(%{ Args })

internal_function_html
    %{ Args }

internal_function_exists
    yr.exists(%{ Args })

internal_function_number
    (+(%{ Args }))

internal_function_string [ ast.Signature === 'nodeset' ]
    ('' + yr.nodeset2scalar(%{ Args }))

internal_function_string
    ('' + %{ Args })

internal_function_scalar
    %{ Args }

internal_function_boolean
    %{ Args }

internal_function_log
    (console.log(%{ Args }),'')

internal_function_document
    yr.document(%{ Args })

internal_function_subnode
    yr.subnode(%{ Args }, c%{ Cid })

// ----------------------------------------------------------------------------------------------------------------- //

inline_var [ ast.def.isGlobal() ]

    m.v('v%{ Id }', c%{ Cid })

inline_var
    v%{ Id }

//  ---------------------------------------------------------------------------------------------------------------  //

inline_number
    %{ Value }

inline_string
    %{ Value }

string_expr
    ( %{ Expr } )

string_literal
    %{ stringify() }



// ----------------------------------------------------------------------------------------------------------------- //
// cast and quote
// ----------------------------------------------------------------------------------------------------------------- //

cast [ ast.From === 'nodeset' && ast.To === 'data' ]
    yr.nodeset2data(%{ Expr })

cast [ ast.From === 'nodeset' && (ast.To === 'scalar' || ast.To === 'xml' || ast.To === 'attrvalue' || ast.To === 'boolean') ]
    nodeset2%{ To }( %{ Expr } )

cast [ ast.From === 'scalar' && (ast.To === 'xml' || ast.To == 'attrvalue') ]
    scalar2%{ To }( %{ Expr } )

cast [ ast.From === 'xml' && ast.To == 'attrvalue' ]
    xml2attrvalue( %{ Expr } )

cast [ ast.From === 'xml' && ast.To == 'scalar' ]
    xml2scalar( %{ Expr } )

cast [ ast.From === 'object' && ast.To == 'nodeset' ]
    yr.object2nodeset( %{ Expr } )

cast [ ast.From === 'array' && ast.To == 'nodeset' ]
    yr.array2nodeset( %{ Expr } )

// FIXME: Не бывает ли ситуации, когда таки нужно нетривиально приводить scalar к boolean?
cast [ ast.From === 'scalar' && ast.To === 'boolean' ]
    %{ Expr }

cast
    %{ Expr }

quote
    yr.%{ Mode }Quote(%{ Expr })

//  ---------------------------------------------------------------------------------------------------------------  //

sort [ ast.Order === 'desc' ]

    yr.sort(%{ Nodes }, function(c%{ Cid }, i%{ Cid }, l%{ Cid }) { return %{ By }; }, true)

sort

    yr.sort(%{ Nodes }, function(c%{ Cid }, i%{ Cid }, l%{ Cid }) { return %{ By }; })

// ----------------------------------------------------------------------------------------------------------------- //
// misc
// ----------------------------------------------------------------------------------------------------------------- //

* :yate
    %{ yate() }


