#!/usr/bin/env node

var fs = require('fs');
var path = require('path');

//  ---------------------------------------------------------------------------------------------------------------  //

var nopt = require('nopt');

var parsed = nopt({
    'result': Boolean,
    'diff': Boolean,
    'only-total': Boolean,
    'only-errors': Boolean,
});

//  ---------------------------------------------------------------------------------------------------------------  //

var yate = require('../lib/index.js');

var compiler = new yate.Compiler();

//  ---------------------------------------------------------------------------------------------------------------  //

var format = '    %s    %s\t%s';

var prevSection = '';
var nTotal = 0;
var nError = 0;
var nKnown = 0;

var files;
if (parsed.argv.remain.length) {
    files = parsed.argv.remain;
} else {
    files = fs.readdirSync('.').sort();
}

for (var i = 0, l = files.length; i < l; i++) {
    var filename = files[i];
    if ( !/\.\d+\.test$/.test(filename) ) {
        continue;
    }

    var section = /^(.*?)\.\d+\.test/.exec(filename)[1];
    if ( !parsed['only-total'] && section !== prevSection && !parsed['only-errors'] ) {
        console.log('');
    }
    prevSection = section;

    var test = eval( '(' + fs.readFileSync(filename, 'utf-8') + ')' );

    var yatename = filename.replace(/\.test$/, '.test.yate');

    var dataname = filename.replace(/\.test$/, '.test.data');
    var data;
    try {
        data = eval( '(' + fs.readFileSync(dataname, 'utf-8') + ')' );
    } catch (e) {
        data = {};
    }

    var filename = strpad(yatename);

    var status, desc;

    try {
        var js = compiler.compile(
            yatename,
            {
                target: 'node'
            }
        );
        fs.writeFileSync(yatename + '.node.js', js, 'utf-8');
        var module = require( './' + yatename + '.node.js' );
        var result = module(data);
        //yate.run( yatename, { data: data }, test.externals );

        if (test.throws) {
            status = 'fail';
            desc = 'doesn\'t throw';
        } else {
            status = (result == test.result) ? 'ok' : 'fail';
            desc = test.description;
        }
    } catch (e) {
        if (test.throws) {
            status = 'ok';
            desc = test.description;
        } else {
            status = 'throw';
            desc = e.message || 'unknown error';
        }
    }

    var statusColor = 'green', filenameColor = 'gray', descColor = 'gray';

    nTotal++;

    if (status != 'ok') {
        nError++;
        if (test.known) {
            nKnown++;
        }

        statusColor = 'red';
        filenameColor = descColor = 'white';
    }

    if (test.known) {
        statusColor = 'yellow';
    }

    if ( !parsed['only-total'] && ( status !== 'ok' || !parsed['only-errors'] ) ) {
        console.log(format, filename[filenameColor], status[statusColor], desc[descColor]);
        if (status === 'fail' && parsed.diff) {
            console.log( format, strpad('result:').red, JSON.stringify(result).red, '' );
            console.log( format, strpad('expected:').green, JSON.stringify(test.result).green, '' );
            console.log();
        } else if (parsed.result) {
            var color = (status === 'ok') ? 'green' : 'red';
            console.log( format, strpad('result:')[color], JSON.stringify(result)[color], '' );
            console.log();
        }
    }
}

console.log('');
var stat = [];
if (nTotal - nError) {
    stat.push( (nTotal - nError).toString().green );
}
if (nError - nKnown) {
    stat.push( (nError - nKnown).toString().red );
}
if (nKnown) {
    stat.push( nKnown.toString().yellow );
}

console.log( 'Tests: ' + nTotal.toString().white + ' = ' + stat.join(' + ') );

console.log('\n');

if (nError) {
    process.exit(1);
} else {
    process.exit(0);
}

function strpad(s) {
    var l = 36 - s.length;
    if (l > 0) {
        return Array(l - 1).join(' ') + s;
    }
    return s;
}

// vim: set ft=javascript: //

