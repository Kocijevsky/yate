#!/usr/bin/env node

var fs_ = require('fs');

//  ---------------------------------------------------------------------------------------------------------------  //

var nopt = require('nopt');

var options = nopt({
    result: Boolean,
    diff: Boolean,
    only_total: Boolean,
    only_errors: Boolean,
});

//  ---------------------------------------------------------------------------------------------------------------  //

var yate = require('../lib/index.js');

var compiler = new yate.Compiler();

//  ---------------------------------------------------------------------------------------------------------------  //

var format = '    %s    %s\t%s';

var prev_section = '';
var n_total = 0;
var n_error = 0;
var n_known = 0;

//  ---------------------------------------------------------------------------------------------------------------  //

var files;
if (options.argv.remain.length) {
    files = options.argv.remain;
} else {
    files = fs_.readdirSync('.').sort();
}

//  ---------------------------------------------------------------------------------------------------------------  //

for (var i = 0, l = files.length; i < l; i++) {
    var filename = files[i];
    if ( !/\.\d+\.test$/.test(filename) ) {
        continue;
    }

    var section = /^(.*?)\.\d+\.test/.exec(filename)[1];
    if ( !options.only_total && section !== prev_section && !options.only_errors ) {
        console.log();
    }
    prev_section = section;

    var test = load(filename);

    var yatename = filename + '.yate';
    var dataname = filename + '.data';

    var data;
    try {
        data = load(dataname);
    } catch (e) {
        data = {};
    }

    var filename = strpad(yatename);

    var status, desc;

    try {
        var params = {
            target: 'node'
        };
        if (test.externals) {
            params.externals = [ test.externals ];
        }
        var js = compiler.compile(yatename, params);

        //  FIXME: Унести в Compiler?
        fs_.writeFileSync(yatename + '.node.js', js, 'utf-8');
        var module = require( './' + yatename + '.node.js' );
        var result = module( data, test.mode || '' );

        if (test.throws) {
            status = 'fail';
            desc = 'doesn\'t throw';
        } else {
            status = (result == test.result) ? 'ok' : 'fail';
            desc = test.description;
        }

    } catch (e) {
        if (test.throws) {
            status = 'ok';
            desc = test.description;
        } else {
            status = 'throw';
            desc = e.message || 'unknown error';
        }

    }

    var status_color = 'green';
    var filename_color = 'gray';
    var descColor = 'gray';

    n_total++;

    if (status != 'ok') {
        n_error++;
        if (test.known) {
            n_known++;
        }

        status_color = 'red';
        filename_color = descColor = 'white';
    }

    if (test.known) {
        status_color = 'yellow';
    }

    if ( !options.only_total && ( status !== 'ok' || !options.only_errors ) ) {
        console.log(format, filename[filename_color], status[status_color], desc[descColor]);

        if (status === 'fail' && options.diff) {
            console.log( format, strpad('result:').red, JSON.stringify(result).red, '' );
            console.log( format, strpad('expected:').green, JSON.stringify(test.result).green, '' );
            console.log();

        } else if (options.result) {
            var color = (status === 'ok') ? 'green' : 'red';
            console.log( format, strpad('result:')[color], JSON.stringify(result)[color], '' );
            console.log();

        }
    }
}

//  ---------------------------------------------------------------------------------------------------------------  //

console.log();

var stat = [];
if (n_total - n_error) {
    stat.push( (n_total - n_error).toString().green );
}
if (n_error - n_known) {
    stat.push( (n_error - n_known).toString().red );
}
if (n_known) {
    stat.push( n_known.toString().yellow );
}

console.log( 'Tests: ' + n_total.toString().white + ' = ' + stat.join(' + ') );
console.log('\n');

if (n_error) {
    process.exit(1);
} else {
    process.exit(0);
}

//  ---------------------------------------------------------------------------------------------------------------  //

function strpad(s) {
    var l = 36 - s.length;
    if (l > 0) {
        return Array(l - 1).join(' ') + s;
    }
    return s;
}

function load(filename) {
    return eval( '(' + fs_.readFileSync(filename, 'utf-8') + ')' );
}

//  ---------------------------------------------------------------------------------------------------------------  //

//  vim: set ft=javascript: //

